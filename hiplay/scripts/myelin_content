#! /usr/bin/env python3

""" script to compute a myelin proxy (R1 values) in differents regions of the cortex and hippocampus

This code was developped by Mathilde Ripart at Neurospin (2019)

For any use of this code, the following paper must be cited:
[1] Natalia Zaretskaya et al, Advantages of cortical surface reconstruction using submillimeter 7 T MEMPRAGE, 2018, NeuroImage 165
[2] JE Iglesias, A computational atlas of the hippocampal formation using ex vivo, ultra-high resolutionMRI: Application to adaptive segmentation of in vivo MRI, Neuroimage, 2015
[3] A.Massire et al, High-resolution multi-parametric quantitative magnetic resonance imaging of the human cervical spinal cord at 7T, NeuroImage, 2016
[4] M.Jenkinson et al, Improved Optimisation for the Robust and Accurate Linear Registration and Motion Correction of Brain Images, NeuroImage, 2002

"""

#Module & functions
import os
import shutil
import io
import contextlib
import argparse
import hiplay.b1correction as b1correction
from hiplay.preprocess_mp2r import apply_processInput
from hiplay.b1correction import apply_B1correction
from hiplay.perform_segmentation import apply_segmentation
from hiplay.compute_results import apply_processResults


#functions
def is_directory(dirarg):
    if not os.path.isdir(dirarg):
        raise argparse.ArgumentError('WARNING : The directory {0} does not exist!'.format(dirarg))
    return dirarg


def read_cli_args():
    """Read command-line interface arguments

    Parse the input to the command line with the argparse module.

    Args:
        N/A

    Returns:
        args (argparse.Namespace): parsed arguments
        cli_usage (string): command-line interface usage message
    """

    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

    # read command line arguments
    cli_description = 'script to compute a myelin proxy (R1 values) in differents regions of the cortex and hippocampus'
    parser = ArgumentParser(description=cli_description,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    required = parser.add_argument_group("required arguments")
    # add arguments
    #-- mandatory arguments
    #---- Patient identifier
    parser.add_argument('date_NIP',
                        metavar='date_NIP',
                        default=True,
                        help='format yyyymmdd_xxxxxxxx')
    #---- output dir
    parser.add_argument('outdir_path',
                        metavar='out_dir',
                        default=True,
                        help='path where output files will be stored')

    #-- optional arguments
    #--- No segmentation flag
    parser.add_argument('--noseg',
                        action="store_true",
                        help='do not perform cortical and hippocampal parcellations')


# parse all arguments
    args = parser.parse_args()
    

    # store usage message in string
    cli_usage = None
    with io.StringIO() as buf, contextlib.redirect_stdout(buf):
        parser.print_usage()
        cli_usage = buf.getvalue()
    if cli_usage is None:
        raise ValueError('the CLI usage variable must not be empty')

    return args, cli_usage


def check_version(freesurferHome, fslHome):
    import re

    #Global version
    glob_version_freesurfer='v6.0.0'
    glob_version_fsl = '6.0.0'

    #Freesurfer
    version_file  = os.path.join(freesurferHome,'build-stamp.txt')
    pattern = re.compile('^v([0-9]+)([.])([0-9]+)([.])([0-9]+)?$')
    data = open(version_file).read().split("-")
    version_freesurfer = [pattern.search(f).group() for f in data if pattern.search(f) is not None][0]

    del version_file, pattern, data

    # fsl
    version_file = os.path.join(fslHome, 'etc/fslversion')
    pattern = re.compile('^([0-9]+)([.])([0-9]+)([.])([0-9]+)?$')
    data = open(version_file).read().split()
    version_fsl = [pattern.search(f).group() for f in data if pattern.search(f) is not None][0]

    #check
    if version_freesurfer != glob_version_freesurfer:
        print('WARNING : The scripts required version {} of freesurfer and version {} has been given'.format(glob_version_freesurfer,version_freesurfer))
        exit()
    else:
        print('Use of Freesurfer {} find at {}'.format(glob_version_freesurfer,freesurferHome))
    if version_fsl != glob_version_fsl:
        print('WARNING : The scripts required version {} of fsl and version {} has been given'.format(glob_version_fsl, version_fsl))
        exit()
    else:
        print('Use of Freesurfer {} find at {}'.format(glob_version_fsl,fslHome))


def main():
    '''
    main script of the myelin_content program.
    The program first performs a R1map (myelin proxy) corrected from B1+ inhomogeneities based on the uniform T1 contrast from the 	mp2rage sequence and a b1map.
    A cortical and hippocampal parcellation are performed using freesurfer, and the R1 values are quantified in the differents ROIs. This part is optional.

    Parameters
    ----------
        <Date_NIP> : date (format yyyymmdd) & NIP of the patient acquisition
        <outdir_path> : path to folder in which results will be stored
        --noseg (OPTIONAL) : do not perform cortical and hippocampal parcellations

    Outputs
    ----------
    Will output the following file in four differents folders in the output directory :
        1.Inputs
            t1q.nii.gz : T1 map image from the MP2RAGE sequence
            t1uni.nii.gz : T1 uniform image from the MP2RAGE sequence
            t1uni_den.nii.gz : T1 uniform and denoised image from the MP2RAGE sequence
            b1map.nii.gz : b1 map obtain from the xfl sequence
            info_t1_image : one dicom image of the T1 map (to extract header information)
            info_uni : one dicom image of the T1 uniform image (to extract header information)
            info_uni-den : one dicom image of the T1 uniform and denoised image (to extract header information)
            info_b1 : one dicom image of the b1 map (to extract header information)
        2.B1correction
            b1_to_mp2r.nii.gz : b1map resampled at the T1 mp2rage resolution
            t1q_cor.nii : T1 map corrected from the B1+
            R1q_cor.nii : R1 map corrected from the B1+
            (optional) t1uni_cor.nii : T1 uni corrected from the B1+
        3. Segmentation
            brainmask_orig.mgz : brain mask in the T1 original space
            seg_DKT_orig.mgz : cortical parcellation volume (desikan-kiliany labels) in the T1 original space
            seg_hippo_lh_orig.mgz : hippocampal parcellation volume (left hippocampus labels) in the T1 original space
            seg_hippo_rh_orig.mgz : hippocampal parcellation volume (right hippocampus labels) in the T1 original space
        4. Results
            t1q_cor_clean.nii.gz : T1 map corrected and skull-stripped
            R1q_cor_clean.nii.gz : R1 map corrected and skull-stripped
            R1_per_regions_dkt.txt : statistics on R1 values for different regions of the desikan-kiliany atlas
            R1_per_regions_hippo_lh.txt : statistics on R1 values for different regions of the left hippocampus
            R1_per_regions_hippo_rh.txt : statistics on R1 values for different regions of the right hippocampus

    '''


	#--------------CHANGE HERE PATHS to freesurfer and fsl-----------
    path_freesurfer = 'False'     #Replace False by freesurfer path
    path_fsl = 'False'            #Replace False by fsl path
    
    #------------- Initialisation -----------------------------------

    # Parse command-line arguments
    args, cli_usage = read_cli_args()

    # Get the name of the subject in format date_NIP
    subj_name = args.date_NIP

    # Get the main output directory
    processed_data_directory = args.outdir_path

    # Get the path to freesurfer V6.0 or take default one
    if path_freesurfer != 'False':
        freesurferHome = path_freesurfer
    else:
        freesurferHome = "/i2bm/local/freesurfer-6.0.0"

    # Get the path to fsl V6.0 or take default one
    if path_fsl != 'False':
        fslHome = path_fsl
    else:
        fslHome = "/i2bm/local/fsl-6.0.0"

    # Path to project directory
    project_directory = os.path.dirname(b1correction.__file__)

    # Path to directory which contains all the acquisitions in dicom data
    deviceSeptT_directory = "/neurospin/acquisition/database/Investigational_Device_7T"


    # Check the version of freesurfer and fsl
    check_version(freesurferHome,fslHome)

    # ------------- Create main output folder -----------------------------------

    # Check if main directory exists. If not create it
    output_folder = processed_data_directory
    if os.path.isdir(output_folder):
        print('INFO : Dive into the main output folder : {} '.format(output_folder))
    else:
        print('INFO : Create the main output folder : {} '.format(output_folder))
        os.makedirs(output_folder)

    #Check if freesurfer output directory exists. If not create it.
    freesurf_output_dir = os.path.join(output_folder, "freesurfer_outputs")
    if os.path.isdir(freesurf_output_dir):
        print('INFO : Freesurfer output folder present : {} '.format(freesurf_output_dir))
    else:
        print('INFO : Create the freesurfer output folder : {} '.format(freesurf_output_dir))
        os.makedirs(freesurf_output_dir)

    # Check if expert.opts exists in freesurfer output directory. If not copy it from the project folder.
    expert_path =  os.path.join(project_directory,'expert.opts')
    expert_newpath = os.path.join(freesurf_output_dir, 'expert.opts')
    if not os.path.isfile(expert_newpath):
        try:
            shutil.copyfile(expert_path, expert_newpath)
        except FileNotFoundError:
            print('Could not copy the expert.opt file from the hiplay package.')

    # ------------- Create subject output directory -----------------------------------

    #Check if subject folder already exists. If not create it. If yes ask for delete
    subject_directory = os.path.join(output_folder, subj_name)
    try:
        os.mkdir(subject_directory)
    except FileExistsError:
        print('Folder {} already exists in {}. Data are overwritten'.format(subj_name, output_folder))


    #################### Start steps ##################################################

    steps = ['1.Inputs', '2.B1correction', '3.Segmentation', '4.Myelin_proxy']

    #-------------1. Load DICOM and convert in Nifti-------------------

    # create 1.Inputs directory
    folder_name = steps[0]
    folder_path = os.path.join(subject_directory, folder_name)
    try:
        os.mkdir(folder_path)
    except FileExistsError:
        print('Folder {} already exists in {}. Data are overwritten'.format(folder_name, subj_name))

    #run preprocess
    date = subj_name.split('_')[0]
    NIP = subj_name.split('_')[1]
    apply_processInput(deviceSeptT_directory, steps, folder_path, NIP, date)

    del folder_path, folder_name

    #----------- 2. B1 correction---------------------------------------------

    # Check if 2.Data_unbiased already exist. If not create it.
    folder_name = steps[1]
    folder_path = os.path.join(subject_directory, folder_name)
    try:
        os.mkdir(folder_path)
    except FileExistsError:
        print('Folder {} already exists in {}. Data are overwritten'.format(folder_name, subj_name))

    # run correction
    apply_B1correction(subject_directory, steps, project_directory, fslHome)

    del folder_path, folder_name

    # #------------ 3. Segmentation  ------------------------------------------

    if not args.noseg:
        # Check if 3.Segmentation already exist. If not create it.
        folder_name = steps[2]
        folder_path = os.path.join(subject_directory, folder_name)
        try:
            os.mkdir(folder_path)
        except FileExistsError:
            print('Folder {} already exists in {}. Data are overwritten'.format(folder_name, subj_name))

        # run segmentation process
        apply_segmentation(subject_directory, steps, freesurf_output_dir, freesurferHome, subj_name)

        del folder_path, folder_name


    #------------ 4. Analysis--------------------------------------------------------

        # Check if 4.Myelin_proxy already exist. If not create it.
        folder_name = steps[3]
        folder_path = os.path.join(subject_directory, folder_name)
        try:
            os.mkdir(folder_path)
        except FileExistsError:
            print('Folder {} already exists in {}. Data are overwritten'.format(folder_name, subj_name))

        apply_processResults(subject_directory, steps,freesurf_output_dir, subj_name, freesurferHome)

        del folder_path, folder_name
    #--------------END-----------------------------------------------------

    print("INFO : End of process. Results for {} can be find in {}".format(subj_name,subject_directory))

if __name__ == "__main__":
    main()
